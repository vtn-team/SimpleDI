using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using UnityEditor;
using UnityEngine;

// ========== コード生成用のエディタスクリプト ==========
#if UNITY_EDITOR

public static class DICodeGenerator
{
    private const string GENERATED_CODE_PATH = "Assets/Scripts/Inject/Generated/";
    private const string INJECT_PARAM_LIST_FILE_NAME = "InjectParamListParams.cs";
    private const string SETTINGS_PATH = "Assets/DataAsset/Params/ParamInjectSettings.asset";

    [MenuItem("Tools/DI/Generate Injection Code")]
    public static void GenerateInjectionCode()
    {
        // 設定ファイルをロード
        var settings = LoadSettings();
        string outputPath = settings?.GeneratedCodePath ?? GENERATED_CODE_PATH;
        
        // 出力ディレクトリを作成
        if (!Directory.Exists(outputPath))
        {
            Directory.CreateDirectory(outputPath);
        }

        // 全てのアセンブリからInjectアトリビュートのあるクラスを検索
        var types = FindInjectableTypes();

        // 各クラスに対して個別のファイルを生成
        foreach (var type in types)
        {
            GenerateInjectParamsFileForType(outputPath, type);
        }
        
        // InjectParamListのPartial Classを生成
        GenerateInjectParamListPartialClass(outputPath, settings);

        AssetDatabase.Refresh();
        Debug.Log($"Generated injection code for {types.Count} types in {outputPath}");
    }

    /// <summary>
    /// 設定ファイルをロード
    /// </summary>
    private static ParamInjectSettings LoadSettings()
    {
        return AssetDatabase.LoadAssetAtPath<ParamInjectSettings>(SETTINGS_PATH);
    }

    /// <summary>
    /// 個別クラス用のInjectParamsファイルを生成
    /// </summary>
    private static void GenerateInjectParamsFileForType(string outputPath, Type type)
    {
        var sb = new StringBuilder();
        
        // ヘッダー
        sb.AppendLine("// ========== AUTO GENERATED CODE ==========");
        sb.AppendLine("// Generated at: " + DateTime.Now);
        sb.AppendLine("// DO NOT EDIT THIS FILE MANUALLY");
        sb.AppendLine();
        sb.AppendLine("using UnityEngine;");
        sb.AppendLine("using System.Collections.Generic;");
        sb.AppendLine();

        string className = type.Name;
        string namespaceName = type.Namespace;

        // partial classとして生成
        if (!string.IsNullOrEmpty(namespaceName))
        {
            sb.AppendLine($"namespace {namespaceName}");
            sb.AppendLine("{");
        }

        sb.AppendLine($"    public partial class {className} : IInjectable");
        sb.AppendLine("    {");
        sb.AppendLine("        public virtual void InjectDependencies()");
        sb.AppendLine("        {");
        sb.AppendLine("            // パラメータ注入処理");
        sb.AppendLine("            var injectSystem = InjectSystem.Instance;");
        sb.AppendLine("            if (injectSystem == null || injectSystem.ParamInjectSettings == null)");
        sb.AppendLine("            {");
        sb.AppendLine($"                UnityEngine.Debug.LogError(\"InjectSystem or ParamInjectSettings not found for {className}\");");
        sb.AppendLine("                return;");
        sb.AppendLine("            }");
        sb.AppendLine();
        sb.AppendLine("            // InjectParamListから直接アクセス");
        sb.AppendLine("            var paramList = injectSystem.ParamInjectSettings.SelectedParamList;");
        sb.AppendLine("            if (paramList == null)");
        sb.AppendLine("            {");
        sb.AppendLine($"                UnityEngine.Debug.Log(\"InjectParamList not found for {className}. Set as original param. \");");
        sb.AppendLine("                return;");
        sb.AppendLine("            }");
        sb.AppendLine();

        // フィールドごとに注入コードを生成
        var fields = type.GetFields(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);
        foreach (var field in fields)
        {
            var injectAttr = field.GetCustomAttribute<InjectAttribute>();
            if (injectAttr != null)
            {
                string key = injectAttr.Key ?? field.Name;
                if (string.IsNullOrEmpty(injectAttr.Key) && key.StartsWith("_"))
                {
                    key = key.Substring(1);
                }

                string fieldName = field.Name;
                string typeName = GetTypeName(field.FieldType);

                string propertyName = ToUpperCamelCase(key);
                sb.AppendLine($"            // Inject {fieldName} (key: {key}, type: {typeName})");
                sb.AppendLine($"            this.{fieldName} = paramList.{propertyName};");
                sb.AppendLine($"            UnityEngine.Debug.Log($\"Injected {fieldName} = {{paramList.{propertyName}}} in {className}\");");
                sb.AppendLine();
            }
        }

        sb.AppendLine("        }");
        sb.AppendLine("    }");

        if (!string.IsNullOrEmpty(namespaceName))
        {
            sb.AppendLine("}");
        }

        // ファイル名: {クラス名}InjectParams.cs
        string fileName = $"{className}InjectParams.cs";
        string fullPath = Path.Combine(outputPath, fileName);
        File.WriteAllText(fullPath, sb.ToString());
    }

    /// <summary>
    /// InjectParamListのPartial Classを生成
    /// </summary>
    private static void GenerateInjectParamListPartialClass(string outputPath, ParamInjectSettings settings)
    {
        var sb = new StringBuilder();
        
        // ヘッダー
        sb.AppendLine("// ========== AUTO GENERATED CODE ==========");
        sb.AppendLine("// Generated at: " + DateTime.Now);
        sb.AppendLine("// DO NOT EDIT THIS FILE MANUALLY");
        sb.AppendLine();
        sb.AppendLine("using UnityEngine;");
        sb.AppendLine("using System.Collections.Generic;");
        sb.AppendLine();

        sb.AppendLine("// ========== InjectParamList Partial Class (Auto Generated) ==========");
        sb.AppendLine();
        sb.AppendLine("public partial class InjectParamList");
        sb.AppendLine("{");
        
        // 注入可能な型を検索してフィールドを生成
        var types = FindInjectableTypes();
        var processedFields = new Dictionary<string, object>(); // 重複を避けるため、デフォルト値も保持
        
        foreach (var type in types)
        {
            var fields = type.GetFields(System.Reflection.BindingFlags.Instance | 
                                      System.Reflection.BindingFlags.Public | 
                                      System.Reflection.BindingFlags.NonPublic);
            
            foreach (var field in fields)
            {
                var injectAttr = field.GetCustomAttribute<InjectAttribute>();
                if (injectAttr != null)
                {
                    string key = injectAttr.Key ?? field.Name;
                    if (string.IsNullOrEmpty(injectAttr.Key) && key.StartsWith("_"))
                    {
                        key = key.Substring(1);
                    }
                    
                    // 同じ名前のフィールドは一度だけ生成、最初に見つけたデフォルト値を使用
                    if (processedFields.ContainsKey(key))
                        continue;
                    
                    // デフォルト値を取得
                    object defaultValue = GetDefaultValueFromField(type, field);
                    processedFields.Add(key, defaultValue);
                    
                    string fieldTypeName = GetTypeName(field.FieldType);
                    // UpperCamelCaseに変換
                    string propertyName = ToUpperCamelCase(key);
                    string defaultValueString = FormatDefaultValue(defaultValue, field.FieldType);
                    
                    sb.AppendLine($"    [SerializeField] private {fieldTypeName} _{key} = {defaultValueString};");
                    sb.AppendLine($"    public {fieldTypeName} {propertyName} => _{key};");
                    sb.AppendLine();
                }
            }
        }
        
        sb.AppendLine("}");
        sb.AppendLine();

        // ファイル名: InjectParamListParams.cs
        string fullPath = Path.Combine(outputPath, INJECT_PARAM_LIST_FILE_NAME);
        File.WriteAllText(fullPath, sb.ToString());
    }

    /// <summary>
    /// 注入可能な型を検索
    /// </summary>
    public static List<Type> FindInjectableTypes()
    {
        var types = new List<Type>();

        foreach (var assembly in AppDomain.CurrentDomain.GetAssemblies())
        {
            try
            {
                foreach (var type in assembly.GetTypes())
                {
                    if (type.IsAbstract || type.IsInterface) continue;

                    var fields = type.GetFields(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);
                    bool hasInjectField = fields.Any(f => f.GetCustomAttribute<InjectAttribute>() != null);

                    if (hasInjectField)
                    {
                        types.Add(type);
                        Debug.Log($"DICodeGenerator: Found injectable type {type.FullName}");
                    }
                }
            }
            catch (Exception e)
            {
                // アセンブリ読み込みエラーを無視（リフレクション系の例外は正常）
                Debug.LogWarning($"DICodeGenerator: Could not scan assembly {assembly.FullName}: {e.Message}");
            }
        }

        return types;
    }

    private static string GetTypeName(Type type)
    {
        if (type == typeof(int)) return "int";
        if (type == typeof(float)) return "float";
        if (type == typeof(string)) return "string";
        if (type == typeof(bool)) return "bool";
        if (type == typeof(double)) return "double";

        return type.FullName ?? type.Name;
    }

    /// <summary>
    /// 文字列をUpperCamelCaseに変換
    /// </summary>
    private static string ToUpperCamelCase(string input)
    {
        if (string.IsNullOrEmpty(input))
            return input;

        // 最初の文字を大文字に
        return char.ToUpper(input[0]) + input.Substring(1);
    }

    /// <summary>
    /// 指定されたクラスのフィールドからデフォルト値を取得
    /// </summary>
    private static object GetDefaultValueFromField(Type type, FieldInfo field)
    {
        try
        {
            // クラスのインスタンスを作成してデフォルト値を取得
            object instance = Activator.CreateInstance(type);
            return field.GetValue(instance);
        }
        catch (Exception e)
        {
            Debug.LogWarning($"DICodeGenerator: Could not get default value for {type.Name}.{field.Name}: {e.Message}");
            
            // フォールバック: 型のデフォルト値を返す
            if (field.FieldType.IsValueType)
            {
                return Activator.CreateInstance(field.FieldType);
            }
            return null;
        }
    }

    /// <summary>
    /// デフォルト値をC#コード形式の文字列に変換
    /// </summary>
    private static string FormatDefaultValue(object value, Type fieldType)
    {
        if (value == null)
        {
            return "default";
        }

        if (fieldType == typeof(string))
        {
            return $"\"{value}\"";
        }
        else if (fieldType == typeof(bool))
        {
            return value.ToString().ToLower();
        }
        else if (fieldType == typeof(float))
        {
            return $"{value}f";
        }
        else if (fieldType == typeof(double))
        {
            return $"{value}d";
        }
        else if (fieldType == typeof(Vector3))
        {
            var v3 = (Vector3)value;
            return $"new UnityEngine.Vector3({v3.x}f, {v3.y}f, {v3.z}f)";
        }
        else if (fieldType == typeof(Vector2))
        {
            var v2 = (Vector2)value;
            return $"new UnityEngine.Vector2({v2.x}f, {v2.y}f)";
        }
        else if (fieldType == typeof(Color))
        {
            var color = (Color)value;
            return $"new UnityEngine.Color({color.r}f, {color.g}f, {color.b}f, {color.a}f)";
        }
        else if (fieldType.IsEnum)
        {
            return $"{fieldType.FullName}.{value}";
        }
        else if (fieldType.IsValueType)
        {
            return value.ToString();
        }
        
        return "default";
    }
}

// カスタムビルドプロセッサー
public class DIBuildProcessor : UnityEditor.Build.IPreprocessBuildWithReport
{
    public int callbackOrder => 0;

    public void OnPreprocessBuild(UnityEditor.Build.Reporting.BuildReport report)
    {
        Debug.Log("Generating DI injection code before build...");
        DICodeGenerator.GenerateInjectionCode();
    }
}

#endif